{"/home/travis/build/npmtest/node-npmtest-pm2-meteor/test.js":"/* istanbul instrument in package npmtest_pm2_meteor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-meteor/lib.npmtest_pm2_meteor.js":"/* istanbul instrument in package npmtest_pm2_meteor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pm2_meteor = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pm2_meteor = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-meteor/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pm2-meteor && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pm2_meteor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pm2_meteor\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pm2_meteor.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pm2_meteor.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pm2_meteor.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pm2_meteor.__dirname + '/lib.npmtest_pm2_meteor.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-meteor/node_modules/pm2-meteor/lib/pm2-meteor.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var cmds, currentVersion, program;\n\n  program = require('commander');\n\n  cmds = require('./commandList');\n\n  currentVersion = require('../package.json').version;\n\n  program.version(\"\" + currentVersion);\n\n  program.command('init').description(\"init a pm2-meteor settings file\").action(function() {\n    return cmds[\"init\"]();\n  });\n\n  program.command('deploy').description('deploy your App to the server(s)').option('-r, --reconfig', \"Settings have changed and PM2 should reset the env\").action(function() {\n    return cmds[\"deploy\"](this.reconfig);\n  });\n\n  program.command('start').description('start your App on the server(s)').action(function() {\n    return cmds[\"start\"]();\n  });\n\n  program.command('stop').description('stop your App on the server(s)').action(function() {\n    return cmds[\"stop\"]();\n  });\n\n  program.command('status').description('print the status of your App (nodes)').action(function() {\n    return cmds[\"status\"]();\n  });\n\n  program.command('generateBundle').description('generates a tarball, containing the Nodejs build and a pm2-env.json file').action(function() {\n    return cmds[\"generateBundle\"]();\n  });\n\n  program.command('undeploy').description('undeploy your App from the server(s) - DANGEROUS!').action(function() {\n    return cmds[\"undeploy\"]();\n  });\n\n  program.command('logs').description('stream realtime logs for App').action(function() {\n    return cmds[\"logs\"]();\n  });\n\n  program.command('revert').description('revert to previous version').action(function() {\n    return cmds[\"revert\"]();\n  });\n\n  program.command('scale <instances>').description('scale App to number-of-instances').action(function(instances) {\n    return cmds[\"scale\"](\"\" + instances);\n  }).on('--help', function() {\n    console.log(\"  Examples:\");\n    console.log(\"  $ pm2-meteor scale +2\");\n    return console.log(\"  $ pm2-meteor scale 4\");\n  });\n\n  program.on('--help', function() {\n    console.log(\"  Visit us:\");\n    console.log(\"\");\n    console.log(\"    http://betawerk.co/\");\n    return console.log(\"\");\n  });\n\n  program.parse(process.argv);\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-pm2-meteor/node_modules/pm2-meteor/lib/commandList.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var _settings, async, cli, commonTasks, localTasks, remoteTasks;\n\n  cli = require('cli');\n\n  async = require('async');\n\n  localTasks = require('./localTasks');\n\n  commonTasks = require('./commonTasks');\n\n  remoteTasks = require('./remoteTasks');\n\n  _settings = require('./settings');\n\n  module.exports = {\n    init: function() {\n      cli.spinner(\"Creating new pm2-meteor.json\");\n      return localTasks.initPM2MeteorSettings(function(err) {\n        if (err) {\n          cli.spinner(\"\", true);\n          return cli.fatal(\"\" + err.message);\n        } else {\n          return cli.spinner(_settings.pm2MeteorConfigName + \" created!\", true);\n        }\n      });\n    },\n    deploy: function(reconfig) {\n      var pm2mConf, session;\n      cli.spinner(\"Building your app and deploying to host machine\");\n      pm2mConf = commonTasks.readPM2MeteorConfig();\n      session = remoteTasks.getRemoteSession(pm2mConf);\n      return async.series([\n        function(cb) {\n          return remoteTasks.checkDeps(session, pm2mConf, cb);\n        }, function(cb) {\n          return remoteTasks.prepareHost(session, pm2mConf, cb);\n        }, function(cb) {\n          return localTasks.generatePM2EnvironmentSettings(pm2mConf, cb);\n        }, function(cb) {\n          return localTasks.bundleApplication(pm2mConf, cb);\n        }, function(cb) {\n          return remoteTasks.backupLastTar(session, pm2mConf, cb);\n        }, function(cb) {\n          return remoteTasks.shipTarBall(session, pm2mConf, cb);\n        }, function(cb) {\n          return remoteTasks.extractTarBall(session, pm2mConf, cb);\n        }, function(cb) {\n          return remoteTasks.installBundleDeps(session, pm2mConf, cb);\n        }, function(cb) {\n          return remoteTasks.reloadApp(session, pm2mConf, reconfig, cb);\n        }\n      ], function(err) {\n        cli.spinner(\"\", true);\n        if (err) {\n          localTasks.makeClean(function(err) {\n            if (err) {\n              return cli.error(err);\n            }\n          });\n          return cli.fatal(\"\" + err.message);\n        } else {\n          localTasks.makeClean(function(err) {\n            if (err) {\n              return cli.error(err);\n            }\n          });\n          return cli.ok(\"Deployed your app on the host machine!\");\n        }\n      });\n    },\n    start: function() {\n      var pm2mConf, session;\n      cli.spinner(\"Starting app on host machine\");\n      pm2mConf = commonTasks.readPM2MeteorConfig();\n      session = remoteTasks.getRemoteSession(pm2mConf);\n      return async.series([\n        function(cb) {\n          return remoteTasks.startApp(session, pm2mConf, cb);\n        }\n      ], function(err) {\n        cli.spinner(\"\", true);\n        if (err) {\n          return cli.fatal(\"\" + err.message);\n        } else {\n          return cli.ok(\"Started your app!\");\n        }\n      });\n    },\n    stop: function() {\n      var pm2mConf, session;\n      cli.spinner(\"Stopping app on host machine\");\n      pm2mConf = commonTasks.readPM2MeteorConfig();\n      session = remoteTasks.getRemoteSession(pm2mConf);\n      return async.series([\n        function(cb) {\n          return remoteTasks.stopApp(session, pm2mConf, cb);\n        }\n      ], function(err) {\n        cli.spinner(\"\", true);\n        if (err) {\n          return cli.fatal(\"\" + err.message);\n        } else {\n          return cli.ok(\"Stopped your app!\");\n        }\n      });\n    },\n    status: function() {\n      var pm2mConf, session;\n      cli.spinner(\"Checking status\");\n      pm2mConf = commonTasks.readPM2MeteorConfig();\n      session = remoteTasks.getRemoteSession(pm2mConf);\n      return async.series([\n        function(cb) {\n          return remoteTasks.status(session, pm2mConf, cb);\n        }\n      ], function(err, result) {\n        cli.spinner(\"\", true);\n        if (err) {\n          return cli.fatal(\"\" + err.message);\n        } else {\n          return cli.info(result);\n        }\n      });\n    },\n    generateBundle: function() {\n      var pm2mConf;\n      cli.spinner(\"Generating bundle with pm2-env file\");\n      pm2mConf = commonTasks.readPM2MeteorConfig();\n      return async.series([\n        function(cb) {\n          return localTasks.generatePM2EnvironmentSettings(pm2mConf, cb);\n        }, function(cb) {\n          return localTasks.bundleApplication(pm2mConf, cb);\n        }, function(cb) {\n          return localTasks.makeCleanAndLeaveBundle(cb);\n        }\n      ], function(err) {\n        cli.spinner(\"\", true);\n        if (err) {\n          return cli.fatal(\"\" + err.message);\n        } else {\n          return cli.ok(\"Generated \" + _settings.bundleTarName + \" with pm2-env file\");\n        }\n      });\n    },\n    undeploy: function() {\n      var pm2mConf, session;\n      cli.spinner(\"Undeploying your App\");\n      pm2mConf = commonTasks.readPM2MeteorConfig();\n      if (!(pm2mConf.allowUndeploy && pm2mConf.allowUndeploy === true)) {\n        cli.fatal(\"Please set ´allowUndeploy´ to true in your pm2-meteor settings file!\");\n      }\n      session = remoteTasks.getRemoteSession(pm2mConf);\n      return async.series([\n        function(cb) {\n          return remoteTasks.killApp(session, pm2mConf, cb);\n        }, function(cb) {\n          return remoteTasks.deleteAppFolder(session, pm2mConf, cb);\n        }\n      ], function(err) {\n        cli.spinner(\"\", true);\n        if (err) {\n          return cli.fatal(\"\" + err.message);\n        } else {\n          return cli.ok(\"Undeployed your App!\");\n        }\n      });\n    },\n    scale: function(opts) {\n      var pm2mConf, session;\n      cli.spinner(\"Scaling your App\");\n      pm2mConf = commonTasks.readPM2MeteorConfig();\n      session = remoteTasks.getRemoteSession(pm2mConf);\n      return async.series([\n        function(cb) {\n          return remoteTasks.scaleApp(session, pm2mConf, opts, cb);\n        }\n      ], function(err) {\n        cli.spinner(\"\", true);\n        if (err) {\n          return cli.fatal(\"\" + err.message);\n        } else {\n          return cli.ok(\"Scaled your App\");\n        }\n      });\n    },\n    logs: function() {\n      var pm2mConf, session;\n      pm2mConf = commonTasks.readPM2MeteorConfig();\n      session = remoteTasks.getRemoteSession(pm2mConf);\n      return async.series([\n        function(cb) {\n          return remoteTasks.getAppLogs(session, pm2mConf, cb);\n        }\n      ], function(err) {\n        if (err) {\n          return cli.fatal(\"\" + err.message);\n        }\n      });\n    },\n    revert: function() {\n      var pm2mConf, session;\n      pm2mConf = commonTasks.readPM2MeteorConfig();\n      session = remoteTasks.getRemoteSession(pm2mConf);\n      return async.series([\n        function(cb) {\n          return remoteTasks.revertToBackup(session, pm2mConf, cb);\n        }, function(cb) {\n          return remoteTasks.extractTarBall(session, pm2mConf, cb);\n        }, function(cb) {\n          return remoteTasks.installBundleDeps(session, pm2mConf, cb);\n        }, function(cb) {\n          return remoteTasks.reloadApp(session, pm2mConf, true, cb);\n        }\n      ], function(err) {\n        cli.spinner(\"\", true);\n        if (err) {\n          return cli.fatal(\"\" + err.message);\n        } else {\n          return cli.ok(\"Reverted and hard-restarted your app.\");\n        }\n      });\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-pm2-meteor/node_modules/pm2-meteor/lib/localTasks.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var CWD, _settings, abs, exec, fs, getAppSrc, isGitProject, nodemiral, path, reapplyMeteorSettings, url;\n\n  fs = require('fs');\n\n  exec = require('child_process').exec;\n\n  path = require('path');\n\n  nodemiral = require('nodemiral');\n\n  url = require('url');\n\n  abs = require('abs');\n\n  _settings = require('./settings');\n\n  CWD = process.cwd();\n\n  isGitProject = function(pm2mConf) {\n    if (!pm2mConf.appLocation.local || pm2mConf.appLocation.local.trim() === \"\") {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  reapplyMeteorSettings = function(pm2mConf) {\n    var err, meteorSettingsLocation, meteorSettingsObj, pm2EnvLocation, pm2EnvObj, prettyJson;\n    if (isGitProject(pm2mConf) && pm2mConf.meteorSettingsInRepo) {\n      if (pm2mConf.meteorSettingsLocation && pm2mConf.meteorSettingsLocation !== \"\") {\n        meteorSettingsObj = {};\n        meteorSettingsLocation = path.join(CWD, _settings.gitDirName, pm2mConf.meteorSettingsLocation);\n        pm2EnvLocation = path.join(CWD, _settings.pm2EnvConfigName);\n        try {\n          meteorSettingsObj = require(meteorSettingsLocation);\n          pm2EnvObj = require(pm2EnvLocation);\n          pm2EnvObj.apps[0].env[\"METEOR_SETTINGS\"] = meteorSettingsObj;\n          prettyJson = JSON.stringify(pm2EnvObj, null, 2);\n          fs.writeFileSync(_settings.pm2EnvConfigName, prettyJson);\n        } catch (error) {\n          err = error;\n          console.log(err.message);\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  getAppSrc = module.exports = {\n    initPM2MeteorSettings: function(done) {\n      var err, json, prettyJson;\n      json = _settings.pm2MeteorConfigTemplate;\n      prettyJson = JSON.stringify(json, null, 2);\n      try {\n        fs.writeFileSync(_settings.pm2MeteorConfigName, prettyJson);\n      } catch (error) {\n        err = error;\n        done(err);\n      }\n      return done();\n    },\n    generatePM2EnvironmentSettings: function(pm2mConf, done) {\n      var appJson, envJson, err, meteorSettingsLocation, meteorSettingsObj, prettyJson;\n      envJson = _settings.pm2EnvConfigTemplate;\n      appJson = {};\n      appJson.name = pm2mConf.appName;\n      appJson.env = pm2mConf.env;\n      appJson.script = path.join(pm2mConf.server.deploymentDir, pm2mConf.appName, \"bundle/main.js\");\n      appJson.exec_mode = pm2mConf.server.exec_mode;\n      appJson.instances = pm2mConf.server.instances;\n      meteorSettingsObj = {};\n      if (pm2mConf.meteorSettingsLocation && !pm2mConf.meteorSettingsInRepo) {\n        try {\n          meteorSettingsLocation = abs(pm2mConf.meteorSettingsLocation);\n          meteorSettingsObj = JSON.parse(fs.readFileSync(meteorSettingsLocation, 'utf8'));\n        } catch (error) {\n          err = error;\n          done(err);\n        }\n      }\n      appJson.env[\"METEOR_SETTINGS\"] = meteorSettingsObj;\n      envJson.apps.push(appJson);\n      prettyJson = JSON.stringify(envJson, null, 2);\n      try {\n        fs.writeFileSync(_settings.pm2EnvConfigName, prettyJson);\n      } catch (error) {\n        err = error;\n        done({\n          message: \"\" + err.message\n        });\n      }\n      return done();\n    },\n    bundleApplication: function(pm2mConf, done) {\n      if (isGitProject(pm2mConf)) {\n        return this.bundleGitApplication(pm2mConf, done);\n      } else {\n        return this.bundleLocalApplication(pm2mConf, done);\n      }\n    },\n    bundleLocalApplication: function(pm2mConf, done) {\n      var buildScript;\n      buildScript = \"\";\n      if (pm2mConf.prebuildScript && pm2mConf.prebuildScript.trim() !== \"\") {\n        buildScript += \"cd \" + (abs(pm2mConf.appLocation.local)) + \" && \" + pm2mConf.prebuildScript + \" && \";\n      }\n      buildScript += \"cd \" + (abs(pm2mConf.appLocation.local)) + \" && meteor build \" + pm2mConf.meteorBuildFlags + \" --directory \" + CWD;\n      return exec(buildScript, function(err, stdout, stderr) {\n        if (err) {\n          return done(err);\n        } else {\n          buildScript = \"cd \" + CWD + \" && tar -zcvf \" + _settings.bundleTarName + \" \" + _settings.bundleName + \" \" + _settings.pm2EnvConfigName;\n          return exec(buildScript, {\n            maxBuffer: 1024 * 200000\n          }, function(err, stdout, stderr) {\n            if (err) {\n              return done(err);\n            } else {\n              return done();\n            }\n          });\n        }\n      });\n    },\n    bundleGitApplication: function(pm2mConf, done) {\n      return exec(\"cd \" + CWD + \" && git clone \" + pm2mConf.appLocation.git + \" --branch \" + pm2mConf.appLocation.branch + \" \" + _settings.gitDirName, function(err, stdout, stderr) {\n        var buildScript;\n        if (err) {\n          return done(err);\n        } else {\n          if (reapplyMeteorSettings(pm2mConf) === false) {\n            return done({\n              message: \"Something went wrong wihile building METEOR_SETTINGS\"\n            });\n          } else {\n            buildScript = \"cd \" + (path.join(CWD, _settings.gitDirName)) + \" \";\n            if (pm2mConf.prebuildScript && pm2mConf.prebuildScript.trim() !== \"\") {\n              buildScript += \"&& \" + pm2mConf.prebuildScript + \" \";\n            }\n            buildScript += \"&& meteor build \" + pm2mConf.meteorBuildFlags + \" --directory \" + CWD;\n            return exec(buildScript, function(err, sdout, stderr) {\n              if (err) {\n                return done(err);\n              } else {\n                return exec(\"cd \" + CWD + \" && tar -zcvf \" + _settings.bundleTarName + \" \" + _settings.bundleName + \" \" + _settings.pm2EnvConfigName, {\n                  maxBuffer: 1024 * 200000\n                }, function(err, stdout, stderr) {\n                  if (err) {\n                    return done(err);\n                  } else {\n                    return done();\n                  }\n                });\n              }\n            });\n          }\n        }\n      });\n    },\n    makeClean: function(done) {\n      return exec(\"cd \" + CWD + \" && rm -rf \" + _settings.bundleName + \" && rm \" + _settings.pm2EnvConfigName + \" && rm \" + _settings.bundleTarName + \" && rm -rf \" + _settings.gitDirName, function(err, stdout, stderr) {\n        if (err) {\n          return done(err);\n        } else {\n          return done();\n        }\n      });\n    },\n    makeCleanAndLeaveBundle: function(done) {\n      return exec(\"cd \" + CWD + \" && rm -rf \" + _settings.bundleName + \" && rm \" + _settings.pm2EnvConfigName + \" && rm -rf \" + _settings.gitDirName, function(err, stdout, stderr) {\n        if (err) {\n          return done(err);\n        } else {\n          return done();\n        }\n      });\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-pm2-meteor/node_modules/pm2-meteor/lib/settings.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  module.exports = {\n    pm2MeteorConfigName: \"pm2-meteor.json\",\n    pm2MeteorConfigTemplate: {\n      appName: \"\",\n      appLocation: {\n        local: \"\",\n        git: \"\",\n        branch: \"master\"\n      },\n      meteorSettingsLocation: \"\",\n      meteorSettingsInRepo: false,\n      prebuildScript: \"\",\n      meteorBuildFlags: \"\",\n      env: {\n        ROOT_URL: \"\",\n        PORT: 3000,\n        MONGO_URL: \"\"\n      },\n      server: {\n        host: \"\",\n        username: \"\",\n        password: \"\",\n        deploymentDir: \"/opt/pm2-meteor\",\n        loadProfile: \"\",\n        nvm: {\n          bin: \"\",\n          use: \"\"\n        },\n        exec_mode: \"cluster_mode\",\n        instances: 1\n      }\n    },\n    pm2EnvConfigName: \"pm2-env.json\",\n    pm2EnvConfigTemplate: {\n      apps: []\n    },\n    localBuildDir: \"/tmp/pm2-meteor-builds\",\n    bundleTarName: \"bundle.tar.gz\",\n    bundleName: \"bundle\",\n    backupDir: \"backup\",\n    gitDirName: \"git-src\"\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-pm2-meteor/node_modules/pm2-meteor/lib/commonTasks.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var CWD, _settings, cli, fs;\n\n  fs = require('fs');\n\n  cli = require('cli');\n\n  _settings = require('./settings');\n\n  CWD = process.cwd();\n\n  module.exports = {\n    readPM2MeteorConfig: function() {\n      var conf, err;\n      conf = null;\n      try {\n        conf = JSON.parse(fs.readFileSync(_settings.pm2MeteorConfigName, 'utf8'));\n      } catch (error) {\n        err = error;\n        cli.fatal(\"Error while trying to read pm2-meteor config: \" + err.message);\n      }\n      return conf;\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-pm2-meteor/node_modules/pm2-meteor/lib/remoteTasks.js":"// Generated by CoffeeScript 1.10.0\n(function() {\n  var BashCmd, CWD, _settings, abs, async, cli, cmdString, fs, getAppLocation, getBackupLocation, nodemiral, path;\n\n  path = require('path');\n\n  nodemiral = require('nodemiral');\n\n  cli = require('cli');\n\n  fs = require('fs');\n\n  async = require('async');\n\n  _settings = require(\"./settings\");\n\n  CWD = process.cwd();\n\n  abs = require(\"abs\");\n\n  getAppLocation = function(pm2mConf) {\n    return path.join(pm2mConf.server.deploymentDir, pm2mConf.appName);\n  };\n\n  getBackupLocation = function(pm2mConf) {\n    return path.join(getAppLocation(pm2mConf), _settings.backupDir);\n  };\n\n  BashCmd = (function() {\n    var appendCmd;\n\n    appendCmd = function(cmd1, cmd2) {\n      if (cmd1) {\n        return cmd1 + \" && \" + cmd2;\n      } else {\n        return \"\" + cmd2;\n      }\n    };\n\n    function BashCmd(pm2mConf, rawCmd) {\n      if (pm2mConf && rawCmd) {\n        this.pm2mConf = pm2mConf;\n        this.rawCmd = rawCmd;\n      } else {\n        throw new Error(\"You must pass a pm2mConf and a Command string...\");\n      }\n    }\n\n    BashCmd.prototype.getString = function() {\n      var loadProfile, nvm, ref, result;\n      ref = this.pm2mConf.server, loadProfile = ref.loadProfile, nvm = ref.nvm;\n      result = \"\";\n      if (loadProfile) {\n        result = appendCmd(result, \"[[ -r \" + loadProfile + \" ]] && . \" + loadProfile);\n      }\n      if (nvm) {\n        if (nvm.bin) {\n          result = appendCmd(result, \"[[ -r \" + nvm.bin + \" ]] && . \" + nvm.bin);\n        }\n      }\n      result = appendCmd(result, this.rawCmd);\n      return result;\n    };\n\n    return BashCmd;\n\n  })();\n\n  cmdString = function(pm2mConf, cmd) {\n    return new BashCmd(pm2mConf, cmd).getString();\n  };\n\n  module.exports = {\n    getRemoteSession: function(pm2mConf) {\n      var session;\n      session = nodemiral.session(\"\" + pm2mConf.server.host, {\n        username: pm2mConf.server.username,\n        password: pm2mConf.server.password ? pm2mConf.server.password : void 0,\n        pem: pm2mConf.server.pem ? fs.readFileSync(abs(pm2mConf.server.pem)) : void 0\n      }, {\n        ssh: pm2mConf.server.port ? {\n          port: pm2mConf.server.port\n        } : void 0\n      });\n      return session;\n    },\n    checkDeps: function(session, pm2mConf, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"(command -v node || echo 'missing node' 1>&2) && (command -v npm || echo 'missing npm' 1>&2) && (command -v pm2 || echo 'missing pm2' 1>&2)\");\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          if (logs.stderr && logs.stderr.length > 0 && /.*missing.*/.test(logs.stderr)) {\n            console.log(\"\");\n            console.log(logs.stderr);\n            return done({\n              message: \"Please make sure you have node, npm and pm2 installed on your remote machine!\"\n            });\n          } else {\n            return done();\n          }\n        }\n      });\n    },\n    prepareHost: function(session, pm2mConf, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"mkdir -p \" + (path.join(getAppLocation(pm2mConf), _settings.backupDir)));\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          if (logs.stderr && logs.stderr.length > 0) {\n            done({\n              message: \"\" + logs.stderr\n            });\n          }\n          return done();\n        }\n      });\n    },\n    shipTarBall: function(session, pm2mConf, done) {\n      var destination, tarLocation;\n      tarLocation = path.join(CWD, _settings.bundleTarName);\n      destination = path.join(getAppLocation(pm2mConf), _settings.bundleTarName);\n      console.log(tarLocation);\n      console.log(destination);\n      return session.copy(tarLocation, destination, {\n        progressBar: true\n      }, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          return done();\n        }\n      });\n    },\n    extractTarBall: function(session, pm2mConf, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"cd \" + (getAppLocation(pm2mConf)) + \" && rm -rf \" + _settings.bundleName + \" && tar -xf \" + _settings.bundleTarName);\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          return done();\n        }\n      });\n    },\n    installBundleDeps: function(session, pm2mConf, done) {\n      var cmd, serverLocation;\n      serverLocation = path.join(getAppLocation(pm2mConf), _settings.bundleName, \"/programs/server\");\n      cmd = cmdString(pm2mConf, \"cd \" + serverLocation + \" && node --version && npm i .\");\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          return done();\n        }\n      });\n    },\n    startApp: function(session, pm2mConf, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"cd \" + (getAppLocation(pm2mConf)) + \" && pm2 start \" + _settings.pm2EnvConfigName);\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          if (logs.stderr) {\n            done({\n              message: logs.stderr\n            });\n          }\n          return done();\n        }\n      });\n    },\n    stopApp: function(session, pm2mConf, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"cd \" + (getAppLocation(pm2mConf)) + \" && pm2 stop \" + _settings.pm2EnvConfigName);\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          if (logs.stderr) {\n            done({\n              message: logs.stderr\n            });\n          }\n          return done();\n        }\n      });\n    },\n    status: function(session, pm2mConf, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"pm2 show \" + pm2mConf.appName);\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          if (logs.stderr) {\n            done(null, logs.stderr);\n          }\n          if (logs.stdout) {\n            return done(null, logs.stdout);\n          }\n        }\n      });\n    },\n    backupLastTar: function(session, pm2mConf, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"cd \" + (getAppLocation(pm2mConf)) + \" && mv \" + _settings.bundleTarName + \" backup/ 2>/dev/null\");\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done();\n        } else {\n          return done();\n        }\n      });\n    },\n    killApp: function(session, pm2mConf, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"pm2 delete \" + pm2mConf.appName);\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          return done();\n        }\n      });\n    },\n    reloadApp: function(session, pm2mConf, reconfig, done) {\n      if (reconfig) {\n        return this.hardReloadApp(session, pm2mConf, done);\n      } else {\n        return this.softReloadApp(session, pm2mConf, done);\n      }\n    },\n    softReloadApp: function(session, pm2mConf, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"cd \" + (getAppLocation(pm2mConf)) + \" && pm2 startOrReload \" + _settings.pm2EnvConfigName);\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          if (logs.stderr) {\n            console.log(logs.stderr);\n          }\n          return done();\n        }\n      });\n    },\n    hardReloadApp: function(session, pm2mConf, done) {\n      var cmd1;\n      cmd1 = cmdString(pm2mConf, \"cd \" + (getAppLocation(pm2mConf)) + \" && pm2 delete \" + pm2mConf.appName);\n      return session.execute(cmd1, {}, function(err, code, logs) {\n        var cmd2;\n        if (err) {\n          return done(err);\n        } else {\n          if (logs.sterr) {\n            console.log(logs.stderr);\n          }\n          cmd2 = cmdString(pm2mConf, \"cd \" + (getAppLocation(pm2mConf)) + \" && pm2 start \" + _settings.pm2EnvConfigName);\n          return session.execute(cmd2, {}, function(err, code, logs) {\n            if (err) {\n              return done(err);\n            } else {\n              if (logs.stderr) {\n                console.log(logs.stderr);\n              }\n              return done();\n            }\n          });\n        }\n      });\n    },\n    deleteAppFolder: function(session, pm2mConf, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"rm -rf \" + (getAppLocation(pm2mConf)));\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          if (logs.stderr) {\n            console.log(logs.stder);\n          }\n          return done();\n        }\n      });\n    },\n    scaleApp: function(session, pm2mConf, sParam, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"pm2 scale \" + pm2mConf.appName + \" \" + sParam);\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          if (logs.stderr) {\n            done({\n              message: logs.stderr\n            });\n          }\n          if (logs.stdout) {\n            console.log(logs.stdout);\n          }\n          return done();\n        }\n      });\n    },\n    getAppLogs: function(session, pm2mConf, done) {\n      var cmd;\n      cmd = cmdString(pm2mConf, \"pm2 logs \" + pm2mConf.appName);\n      return session.execute(cmd, {\n        onStdout: console.log\n      }, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          if (logs.stderr) {\n            return done({\n              message: logs.stderr\n            });\n          }\n        }\n      });\n    },\n    revertToBackup: function(session, pm2mConf, done) {\n      var appLocation, backupLocation, cmd;\n      appLocation = getAppLocation(pm2mConf);\n      backupLocation = getBackupLocation(pm2mConf);\n      cmd = cmdString(pm2mConf, \"mv \" + (path.join(backupLocation, _settings.bundleTarName)) + \" \" + (path.join(appLocation, _settings.bundleTarName)));\n      console.log(\"executing \" + cmd);\n      return session.execute(cmd, {}, function(err, code, logs) {\n        if (err) {\n          return done(err);\n        } else {\n          if (logs.stderr) {\n            console.log(\"*** stderr while reverting to backup ***\");\n            done({\n              message: logs.stderr\n            });\n          }\n          if (logs.stdout) {\n            console.log(logs.stdout);\n          }\n          return done();\n        }\n      });\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-pm2-meteor/node_modules/pm2-meteor/lib/program.js":"#! /usr/bin/env node\n// Generated by CoffeeScript 1.10.0\n(function() {\n  var cmds, currentVersion, program;\n\n  program = require('commander');\n\n  cmds = require('./commandList');\n\n  currentVersion = require('../package.json').version;\n\n  program.version(\"\" + currentVersion);\n\n  program.command('init').description(\"init a pm2-meteor settings file\").action(function() {\n    return cmds[\"init\"]();\n  });\n\n  program.command('deploy').description('deploy your App to the server(s)').option('-r, --reconfig', \"Settings have changed and PM2 should reset the env\").action(function() {\n    return cmds[\"deploy\"](this.reconfig);\n  });\n\n  program.command('start').description('start your App on the server(s)').action(function() {\n    return cmds[\"start\"]();\n  });\n\n  program.command('stop').description('stop your App on the server(s)').action(function() {\n    return cmds[\"stop\"]();\n  });\n\n  program.command('status').description('print the status of your App (nodes)').action(function() {\n    return cmds[\"status\"]();\n  });\n\n  program.command('generateBundle').description('generates a tarball, containing the Nodejs build and a pm2-env.json file').action(function() {\n    return cmds[\"generateBundle\"]();\n  });\n\n  program.command('undeploy').description('undeploy your App from the server(s) - DANGEROUS!').action(function() {\n    return cmds[\"undeploy\"]();\n  });\n\n  program.command('logs').description('stream realtime logs for App').action(function() {\n    return cmds[\"logs\"]();\n  });\n\n  program.command('revert').description('revert to previous version').action(function() {\n    return cmds[\"revert\"]();\n  });\n\n  program.command('scale <instances>').description('scale App to number-of-instances').action(function(instances) {\n    return cmds[\"scale\"](\"\" + instances);\n  }).on('--help', function() {\n    console.log(\"  Examples:\");\n    console.log(\"  $ pm2-meteor scale +2\");\n    return console.log(\"  $ pm2-meteor scale 4\");\n  });\n\n  program.on('--help', function() {\n    console.log(\"  Visit us:\");\n    console.log(\"\");\n    console.log(\"    http://betawerk.co/\");\n    return console.log(\"\");\n  });\n\n  program.parse(process.argv);\n\n}).call(this);\n"}